pipeline {
    agent any

    environment {
        IMAGE_NAME = 'oumeymafarhat/flaskapp'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        KUBECONFIG = credentials('kubeconfig-credentials-id')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
        GH_TOKEN = credentials('github-access-token')
    }



    stages {

        stage("Check for Git Tag") {
            steps {
                script {
                    def tag = sh(returnStdout: true, script: "git tag --contains").trim()

                    if (tag != null) {
                        env.GIT_TAG = tag
                    } else {
                        env.GIT_TAG = ''
                    }
                    echo "GIT_TAG is set to: ${env.GIT_TAG}"
                    env.IMAGE_TAG_RELEASE = "${IMAGE_NAME}:${GIT_TAG}"
                }
            }
        }

       stage('Setup') {
            steps {
                script {
                    sh "poetry install --with dev"
                }
            }
        }

        stage('Create Release') {
            when {
                expression {
                    return env.GIT_TAG == "" 
                }
            }
            steps {
                script {
                    
                    sh 'printenv'
                    def tag = sh(returnStdout: true, script: "poetry run semantic-release version").trim()
                    echo "${tag}"

                    sh "poetry run semantic-release publish"


                    echo "Published new tag: ${tag}"
                }
            }
        }

        stage("Build and Deploy") {
            when {
                expression {
                    return env.GIT_TAG != "" /* Only run if GIT_TAG is not empty*/
                }
            }
        }
    }
}

            